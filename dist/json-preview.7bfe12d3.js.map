{"version":3,"sources":["assets/json-preview.js"],"names":["cPreview","module","show","output","holder","JSON","stringify","encodeHTMLEntities","stylize","innerHTML","string","replace"],"mappings":"AAAA;AACA;AACA;AACA,IAAMA,QAAQ,GAAI,UAAUC,MAAV,EAAkB;AAClC;AACF;AACA;AACA;AACA;AACEA,EAAAA,MAAM,CAACC,IAAP,GAAc,UAASC,MAAT,EAAiBC,MAAjB,EAAyB;AACrC;AACAD,IAAAA,MAAM,GAAGE,IAAI,CAACC,SAAL,CAAgBH,MAAhB,EAAwB,IAAxB,EAA8B,CAA9B,CAAT;AACA;;AACAA,IAAAA,MAAM,GAAGI,kBAAkB,CAAEJ,MAAF,CAA3B;AACA;;AACAA,IAAAA,MAAM,GAAGK,OAAO,CAAEL,MAAF,CAAhB;AACAC,IAAAA,MAAM,CAACK,SAAP,GAAmBN,MAAnB;AACD,GARD;AAUA;AACF;AACA;;;AACE,WAASI,kBAAT,CAA4BG,MAA5B,EAAoC;AAClC,WAAOA,MAAM,CAACC,OAAP,CAAe,IAAf,EAAqB,OAArB,EAA8BA,OAA9B,CAAsC,IAAtC,EAA4C,MAA5C,EAAoDA,OAApD,CAA4D,IAA5D,EAAkE,MAAlE,CAAP;AACD;AAED;AACF;AACA;;;AACE,WAASH,OAAT,CAAiBE,MAAjB,EAAyB;AACvB;AACAA,IAAAA,MAAM,GAAGA,MAAM,CAACC,OAAP,CAAgB,cAAhB,EAAgC,kCAAhC,CAAT;AACA;;AACAD,IAAAA,MAAM,GAAGA,MAAM,CAACC,OAAP,CAAgB,8FAAhB,EAAgH,qCAAhH,CAAT;AACA;;AACAD,IAAAA,MAAM,GAAGA,MAAM,CAACC,OAAP,CAAgB,yBAAhB,EAA2C,8BAA3C,CAAT;AACA;;AACAD,IAAAA,MAAM,GAAGA,MAAM,CAACC,OAAP,CAAgB,aAAhB,EAA+B,iCAA/B,CAAT;AACA;;AACAD,IAAAA,MAAM,GAAGA,MAAM,CAACC,OAAP,CAAgB,yBAAhB,EAA2C,+BAA3C,CAAT;AACA,WAAOD,MAAP;AACD;;AAED,SAAOT,MAAP;AACD,CAzCgB,CAyCd,EAzCc,CAAjB","file":"json-preview.7bfe12d3.js","sourceRoot":"..","sourcesContent":["/**\n * Module to compose output JSON preview\n */\nconst cPreview = (function (module) {\n  /**\n   * Shows JSON in pretty preview\n   * @param {object} output - what to show\n   * @param {Element} holder - where to show\n   */\n  module.show = function(output, holder) {\n    /** Make JSON pretty */\n    output = JSON.stringify( output, null, 4 );\n    /** Encode HTML entities */\n    output = encodeHTMLEntities( output );\n    /** Stylize! */\n    output = stylize( output );\n    holder.innerHTML = output;\n  };\n\n  /**\n   * Converts '>', '<', '&' symbols to entities\n   */\n  function encodeHTMLEntities(string) {\n    return string.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  }\n\n  /**\n   * Some styling magic\n   */\n  function stylize(string) {\n    /** Stylize JSON keys */\n    string = string.replace( /\"(\\w+)\"\\s?:/g, '\"<span class=sc_key>$1</span>\" :');\n    /** Stylize tool names */\n    string = string.replace( /\"(paragraph|quote|list|header|link|code|image|delimiter|raw|checklist|table|embed|warning)\"/g, '\"<span class=sc_toolname>$1</span>\"');\n    /** Stylize HTML tags */\n    string = string.replace( /(&lt;[\\/a-z]+(&gt;)?)/gi, '<span class=sc_tag>$1</span>' );\n    /** Stylize strings */\n    string = string.replace( /\"([^\"]+)\"/gi, '\"<span class=sc_attr>$1</span>\"' );\n    /** Boolean/Null */\n    string = string.replace( /\\b(true|false|null)\\b/gi, '<span class=sc_bool>$1</span>' );\n    return string;\n  }\n\n  return module;\n})({});\n"]}