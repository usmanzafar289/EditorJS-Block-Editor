{"version":3,"sources":["tools/templatedparagraph/src/index.js"],"names":["TemplatedParagraph","data","config","api","readOnly","_CSS","block","styles","wrapper","onKeyUp","bind","_placeholder","placeholder","DEFAULT_PLACEHOLDER","_data","_element","drawView","_preserveBlank","preserveBlank","undefined","e","code","textContent","innerHTML","div","document","createElement","classList","add","contentEditable","dataset","i18n","t","addEventListener","newData","text","savedData","console","log","length","toolsContent","getdata2","JSON","stringify","event","detail","export","import","br","tags","title"],"mappings":"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","file":"src.959d3919.js","sourceRoot":"..","sourcesContent":["/**\n * Build styles\n */\n//require('./index.css').toString();\n\n/**\n * Base Paragraph Block for the Editor.js.\n * Represents simple paragraph with templating support (special save data)\n *\n * @author CodeX (team@codex.so)\n * @copyright CodeX 2018\n * @license The MIT License (MIT)\n */\n\n/**\n * @typedef {object} TemplatedParagraphConfig\n * @property {string} placeholder - placeholder for the empty paragraph\n * @property {boolean} preserveBlank - Whether or not to keep blank paragraphs when saving editor data\n */\n\n/**\n * @typedef {Object} TemplatedParagraphData\n * @description Tool's input and output data format\n * @property {String} text — TemplatedParagraphData's content. Can include HTML tags: <a><b><i>\n */\nclass TemplatedParagraph {\n    /**\n     * Default placeholder for TemplatedParagraph Tool\n     *\n     * @return {string}\n     * @constructor\n     */\n    static get DEFAULT_PLACEHOLDER() {\n        return '';\n    }\n\n    /**\n     * Render plugin`s main Element and fill it with saved data\n     *\n     * @param {object} params - constructor params\n     * @param {TemplatedParagraphData} params.data - previously saved data\n     * @param {TemplatedParagraphConfig} params.config - user config for Tool\n     * @param {object} params.api - editor.js api\n     * @param {boolean} readOnly - read only mode flag\n     */\n    constructor({ data, config, api, readOnly }) {\n        this.api = api;\n        this.readOnly = readOnly;\n\n        this._CSS = {\n            block: this.api.styles.block,\n            wrapper: 'ce-paragraph'\n        };\n\n        if (!this.readOnly) {\n            this.onKeyUp = this.onKeyUp.bind(this);\n        }\n\n        /**\n         * Placeholder for paragraph if it is first Block\n         * @type {string}\n         */\n        this._placeholder = config.placeholder ? config.placeholder : TemplatedParagraph.DEFAULT_PLACEHOLDER;\n        this._data = {};\n        this._element = this.drawView();\n        this._preserveBlank = config.preserveBlank !== undefined ? config.preserveBlank : false;\n\n        this.data = data;\n    }\n\n    /**\n     * Check if text content is empty and set empty string to inner html.\n     * We need this because some browsers (e.g. Safari) insert <br> into empty contenteditanle elements\n     *\n     * @param {KeyboardEvent} e - key up event\n     */\n    onKeyUp(e) {\n        if (e.code !== 'Backspace' && e.code !== 'Delete') {\n            return;\n        }\n\n        const { textContent } = this._element;\n\n        if (textContent === '') {\n            this._element.innerHTML = '';\n        }\n    }\n\n    /**\n     * Create Tool's view\n     * @return {HTMLElement}\n     * @private\n     */\n    drawView() {\n        let div = document.createElement('DIV');\n\n        div.classList.add(this._CSS.wrapper, this._CSS.block);\n         div.contentEditable = false;\n        div.dataset.placeholder = this.api.i18n.t(this._placeholder);\n        this. readOnly = true;\n        if (!this.readOnly) {\n    //            div.contentEditable = true;\n            div.addEventListener('keyup', this.onKeyUp);\n        }\n\n        return div;\n    }\n\n    /**\n     * Return Tool's view\n     *\n     * @returns {HTMLDivElement}\n     */\n    render() {\n        return this._element;\n    }\n\n    /**\n     * Method that specified how to merge two Text blocks.\n     * Called by Editor.js by backspace at the beginning of the Block\n     * @param {TemplatedParagraphData} data\n     * @public\n     */\n    merge(data) {\n        let newData = {\n            text: this.data.text + data.text\n        };\n\n        this.data = newData;\n    }\n\n\n    /**\n     * Validate Paragraph block data:\n     * - check for emptiness\n     *\n     * @param {TemplatedParagraphData} savedData — data received after saving\n     * @returns {boolean} false if saved data is not correct, otherwise true\n     * @public\n     */\n    validate(savedData) {\n        console.log(\"called validate()\");\n        //  if (savedData.text.trim() === '' && !this._preserveBlank) {\n        //  return false;\n        // }\n\n\t\tif(savedData.text.length <= 0){\n\t\t\treturn false;\n\t\t}\n        return true;\n    }\n\n    /**\n     * Extract Tool's data from the view\n     * @param {HTMLDivElement} toolsContent - Paragraph tools rendered view\n     * @returns {TemplatedParagraphData} - saved data\n     * @public\n     */\n    save(toolsContent) {\n\t    //   window.alert(\"saving\");\n        var data = [];\n        data = getdata2(toolsContent, data);\n        console.log(JSON.stringify(data));\n        return {\n            text: data\n        };\n    }\n\t\n    /**\n     * On paste callback fired from Editor.\n     *\n     * @param {PasteEvent} event - event with pasted data\n     */\n    onPaste(event) {\n        const data = {\n            text: event.detail.data.innerHTML\n        };\n\n        this.data = data;\n    }\n\n    /**\n     * Enable Conversion Toolbar. Paragraph can be converted to/from other tools\n     */\n    static get conversionConfig() {\n        console.log(\"called conversionConfig()\");\n        return {\n            export: 'text', // to convert TemplatedParagraph to other block, use 'text' property of saved data\n            import: 'text' // to covert other block's exported string to Paragraph, fill 'text' property of tool data\n        };\n    }\n\n    /**\n     * Sanitizer rules\n     */\n    static get sanitize() {\n        console.log(\"called sanitize()\");\n        return {\n            text: {\n                br: true,\n            }\n        };\n    }\n\n    /**\n     * Returns true to notify the core that read-only mode is supported\n     *\n     * @return {boolean}\n     */\n    static get isReadOnlySupported() {\n        return false;\n    }\n\n    /**\n     * Get current Tools`s data\n     * @returns {TemplatedParagraphData} Current data\n     * @private\n     */\n    get data() {\n        let text = this._element.innerHTML;\n\n        this._data.text = text;\n        console.log(\"called data()\");\n        return this._data;\n    }\n\n    /**\n     * Store data in plugin:\n     * - at the this._data property\n     * - at the HTML\n     *\n     * @param {ParagraphData} data — data to set\n     * @private\n     */\n    set data(data) {\n        this._data = data || {};\n        //      console.log(\"called setdata()\" + this._data.text);\n        this._element.innerHTML = this._data.text || '';\n    }\n\n    /**\n     * Used by Editor paste handling API.\n     * Provides configuration to handle P tags.\n     *\n     * @returns {{tags: string[]}}\n     */\n    static get pasteConfig() {\n        return {\n            tags: ['xx']\n        };\n    }\n\n    /**\n     * Icon and title for displaying at the Toolbox\n     *\n     * @return {{icon: string, title: string}}\n     */\n    static get toolbox() {\n        return {\n            //   icon: require('./toolbox-icon.svg').default,\n            title: 'Text'\n        };\n    }\n}\n\n//module.exports = TemplatedParagraph;\n"]}