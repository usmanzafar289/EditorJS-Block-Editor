{"version":3,"sources":["index.js"],"names":["editor","EditorJS","readOnly","holder","inlineToolbar","image","SimpleImage","templatedparagraph","class","TemplatedParagraph","config","attaches","AttachesTool","endpoint","blocks","type","data","text","saveButton","click","api","block","console","log","document","getElementById","blockButton","imageButton","paraButton","toggleReadOnlyButton","readOnlyIndicator","addEventListener","save","then","savedData","catch","error","templatedata","index","getBlocksCount","insert","addBlock","toggle","readOnlyState","textContent"],"mappings":"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","file":"Html.e31bb0bc.js","sourceRoot":"..","sourcesContent":["/**\r\n * To initialize the Editor, create a new instance with configuration object\r\n * @see docs/installation.md for mode details\r\n */\r\nvar editor = new EditorJS({\r\n\r\n    readOnly: false,\r\n\r\n    holder: 'editorjs',\r\n\r\n    /**\r\n     * Common Inline Toolbar settings\r\n     * - if true (or not specified), the order from 'tool' property will be used\r\n     * - if an array of tool names, this order will be used\r\n     */\r\n    inlineToolbar: ['link', 'marker', 'bold', 'italic'],\r\n    inlineToolbar: true,\r\n\r\n    tools: {\r\n        /**\r\n         * Each Tool is a Plugin. Pass them via 'class' option with necessary settings {@link docs/tools.md}\r\n\r\n        image: {\r\n            class: ImageTool,\r\n            config: {\r\n                endpoints: {\r\n                    byFile: 'http://localhost:8008/uploadFile', // Your backend file uploader endpoint\r\n                    byUrl: 'http://localhost:8008/fetchUrl', // Your endpoint that provides uploading by Url\r\n                }\r\n            }\r\n        },   */\r\n\r\n        image: SimpleImage,\r\n\r\n        templatedparagraph: {\r\n            class: TemplatedParagraph,\r\n            config: {\r\n\r\n            }\r\n        },\r\n\r\n        attaches: {\r\n            class: AttachesTool,\r\n            config: {\r\n                endpoint: 'http://localhost:8008/uploadFile'\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * This Tool will be used as default\r\n     */\r\n    // defaultBlock: 'paragraph',\r\n\r\n    /**\r\n     * Initial Editor data\r\n     */\r\n    data: {\r\n        blocks: [\r\n            {\r\n                type: 'paragraph',\r\n                data: {\r\n                    text: 'Hey. Meet the new Editor. On this page you can see it in action â€” try to edit this text. Source code of the page contains the example of connection and configuration.'\r\n                }\r\n            },\r\n            {\r\n                type: 'templatedparagraph',\r\n                data: {\r\n                    text: 'templatedparagraph'\r\n                }\r\n            },\r\n            {\r\n                type: 'templatedparagraph',\r\n                data: {\r\n                    text: '<MTEXT>sometext</MTEXT>'\r\n                }\r\n            },\r\n        ]\r\n    },\r\n    onReady: function () {\r\n        saveButton.click();\r\n    },\r\n    onChange: function (api, block) {\r\n        console.log('something changed', block);\r\n    }\r\n});\r\n\r\n/**\r\n * Saving button\r\n */\r\nconst saveButton = document.getElementById('saveButton');\r\nconst blockButton = document.getElementById('blockButton');\r\nconst imageButton = document.getElementById('imageButton');\r\nconst paraButton = document.getElementById('paraButton');\r\n\r\n/**\r\n * Toggle read-only button\r\n */\r\nconst toggleReadOnlyButton = document.getElementById('toggleReadOnlyButton');\r\nconst readOnlyIndicator = document.getElementById('readonly-state');\r\n\r\n/**\r\n * Saving example\r\n */\r\nsaveButton.addEventListener('click', function () {\r\n    editor.save()\r\n        .then((savedData) => {\r\n            //   cPreview.show(savedData, document.getElementById(\"output\"));\r\n            console.log(savedData);\r\n            //      Native(\"saveCallback\", savedData);\r\n        })\r\n        .catch((error) => {\r\n            console.error('Saving error', error);\r\n        });\r\n});\r\nconst templatedata = { \"text\": \" some text\" };\r\ntemplatedata.text = `\r\n                <div>\r\n                    <free-text>this is a large block of editable text. this is a large block of editable text. this is a large block of editable text. this is a large block of editable text. this is a large block of editable text. this is a large block of editable text. this is a large block of editable text. this is a large block of editable text. this is a large block of editable text. t\r\nhis is a large block of editable text. this is a large block of editable text. this is a large block of editable text.\r\nthis is a large block of editable text. </free-text>\r\n                    <free-text>editable text </free-text>\r\n                    (fixed text not saved )\r\n                    (fixed text not saved )\r\n                    <fixed-text>   (fixed text saved )</fixed-text>\r\n                    <m-select id=\"aaa\" choices='aaa|bbb|ccc' multiple >multiple choice field </m-select>\r\n                    fixed text\r\n                    <m-select id=\"bbb\" onclick='msel_clicked(this)' choices='aaa|bbb|ccc'>choice field </m-select>\r\n                    <m-select id=\"ccc\" onclick='msel_clicked(this)' choices='aaa|bbb|ccc'>choice field</m-select>\r\n                    postfix\r\n                    <p><deletable-span id=d1>\r\n                        this is a deletable paragraph with some editable text and some fixed text and a deletable word inside the deletable paragraph\r\n                          <free-text  placeholder='type something here placeholder'></free-text>\r\n                        more   deleteable fixed text\r\n                            <deletable-span id=d2>A deleteable word</deletable-span>\r\n                   some extra words here</deletable-span></p>\r\n</br><choose-date> </choose-date/> <choose-person/></choose-person><choose-vehicle></choose-vehicle> <choose-officer></choose-officer/> <choose-location></choose-location/>\r\n<p>was clothing removed    <m-select id=\"q1\" choices='Yes|No'>Yes/No</m-select>\r\n<p><show-if  triggervalue='Yes' triggeron='q1'>What items were removed? <free-text style='width:100px'>type here</free-text></show-if></p>\r\n<p>Type Yes here to trigger a new field ->   <free-text id='q2'>Test</free-text>\r\n<p><show-if  triggervalue='Yes' triggeron='q2'>Type more data here <free-text style='width:100px' placeholder='type something here placeholder'></free-text></show-if></p>\r\n             </div>\r\n`;\r\n\r\n\r\nblockButton.addEventListener('click', function () {\r\n    //window.alert( editor.blocks, data);\r\n    var index = editor.blocks.getBlocksCount();\r\n    editor.blocks.insert(\"templatedparagraph\", templatedata, null, index, true);\r\n});\r\nparaButton.addEventListener('click', function () {\r\n    //window.alert( editor.blocks, data);\r\n    var index = editor.blocks.getBlocksCount();\r\n    var text = { \"text\": \"new para\" };\r\n    editor.blocks.insert(\"paragraph\", text, null, index, true);\r\n});\r\n\r\nimageButton.addEventListener('click', function () {\r\n    //window.alert( editor.blocks, data);\r\n    // Native(\"addAttachment\");\r\n    var index = editor.blocks.getBlocksCount();\r\n    var text = {\r\n        \"caption\": \"caption\", \"url\": \"http://ianb.ca/Photos/P1000615.JPG\"\r\n    };\r\n    editor.blocks.insert(\"image\", text, null, index, true);\r\n});\r\n\r\nfunction addBlock(type, data) {\r\n    var index = editor.blocks.getBlocksCount();\r\n    editor.blocks.insert(type, data, null, index, true);\r\n}\r\n/**\r\n * Toggle read-only example\r\n */\r\ntoggleReadOnlyButton.addEventListener('click', async () => {\r\n    const readOnlyState = await editor.readOnly.toggle();\r\n\r\n    readOnlyIndicator.textContent = readOnlyState ? 'On' : 'Off';\r\n});\r\n"]}