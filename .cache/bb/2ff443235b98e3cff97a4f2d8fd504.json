{"id":"example5.html","dependencies":[{"name":"./assets\\demo.css","dynamic":true,"resolved":"E:\\IAN\\editorjs\\Html\\assets\\demo.css","parent":"E:\\IAN\\editorjs\\Html\\example5.html"},{"name":"./assets\\json-preview.js","dynamic":true,"resolved":"E:\\IAN\\editorjs\\Html\\assets\\json-preview.js","parent":"E:\\IAN\\editorjs\\Html\\example5.html"},{"name":"./tools\\simple-image\\dist\\bundle.js","dynamic":true,"resolved":"E:\\IAN\\editorjs\\Html\\tools\\simple-image\\dist\\bundle.js","parent":"E:\\IAN\\editorjs\\Html\\example5.html"},{"name":"./tools\\templatedparagraph\\src\\index.js","dynamic":true,"resolved":"E:\\IAN\\editorjs\\Html\\tools\\templatedparagraph\\src\\index.js","parent":"E:\\IAN\\editorjs\\Html\\example5.html"},{"name":"./templatedparagraphscripts.js","dynamic":true,"resolved":"E:\\IAN\\editorjs\\Html\\templatedparagraphscripts.js","parent":"E:\\IAN\\editorjs\\Html\\example5.html"},{"name":"./dist\\virtual-select.min.css","dynamic":true,"resolved":"E:\\IAN\\editorjs\\Html\\dist\\virtual-select.min.css","parent":"E:\\IAN\\editorjs\\Html\\example5.html"},{"name":"./dist\\virtual-select.min.js","dynamic":true,"resolved":"E:\\IAN\\editorjs\\Html\\dist\\virtual-select.min.js","parent":"E:\\IAN\\editorjs\\Html\\example5.html"},{"name":"_css_loader","parent":"E:\\IAN\\editorjs\\Html\\example5.html","resolved":"C:\\Users\\Usman-417\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\src\\builtins\\css-loader.js"},{"name":"E:\\IAN\\editorjs\\Html\\package.json","includedInParent":true,"mtime":1627390869611}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Editor.js ðŸ¤©ðŸ§¦ðŸ¤¨ example</title>\r\n    <link href=\"https://fonts.googleapis.com/css?family=PT+Mono\" rel=\"stylesheet\">\r\n    <link href=\"/fd9c3d26979e1f14d8448894117a59a1.css\" rel=\"stylesheet\">\r\n    <script src=\"https://kit.fontawesome.com/3a1495373b.js\" crossorigin=\"anonymous\"></script>\r\n    <script src=\"/92675f7c9009e89e2125be977bfe12d3.js\"></script>\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\r\n    <style>free-text {\r\n            color: blue;\r\n            background-color: lightgray;\r\n        }\r\n\r\n        fixed-text {\r\n        }\r\n\r\n        /*   m-select {\r\n            color: green;\r\n            padding-left: 5px;\r\n            padding-right: 5px;\r\n        }*/\r\n\r\n        /*      .editabledeletabletext {\r\n            background: beige;\r\n            color: blue;\r\n            margin-left: 5px;\r\n            margin-right: 5px;\r\n            border-width: 5px;\r\n        }*/\r\n        .chooserbutton {\r\n            color: green;\r\n            border-radius: 8px;\r\n            background-color: lightgray;\r\n            padding: 5px;\r\n            margin: 5px;\r\n        }\r\n\r\n        .deleteimg {\r\n            display: inline-block;\r\n            vertical-align: -9px;\r\n            border-radius: 8px;\r\n            padding-top: 0px;\r\n            margin: 0px 5px;\r\n        }\r\n\r\n        deletable-span {\r\n            background: beige;\r\n            padding-top: 5px;\r\n            border-radius: 8px;\r\n            margin-left: 5px;\r\n            padding-bottom: 7px;\r\n            margin-right: 5px;\r\n            /* margin-top: 15px; */\r\n            border: 3px dotted #73AD21;\r\n            line-height: 50px;\r\n        }</style>\r\n</head>\r\n<body>\r\n    <div class=\"ce-example\">\r\n\r\n\r\n        <div class=\"ce-example__content _ce-example__content--small\">\r\n\r\n            <!--  the editor content -->\r\n            <div id=\"editorjs\"></div>\r\n\r\n            <span class=\"ce-example__button\" id=\"saveButton\">\r\n                editor.save()\r\n            </span>\r\n            <span class=\"ce-example__button\" id=\"blockButton\">\r\n                Add Template Block\r\n            </span>\r\n            <span class=\"ce-example__button\" id=\"imageButton\">\r\n                Add Image\r\n            </span>\r\n\r\n            <span class=\"ce-example__button\" id=\"paraButton\">\r\n                Add Parapraph\r\n            </span>\r\n\r\n            <div class=\"ce-example__statusbar\">\r\n                Readonly:\r\n                <b id=\"readonly-state\">\r\n                    Off\r\n                </b>\r\n                <div class=\"ce-example__statusbar-button\" id=\"toggleReadOnlyButton\">\r\n                    toggle\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"ce-example__output\">\r\n            <pre class=\"ce-example__output-content\" id=\"output\"></pre>\r\n\r\n            <div class=\"ce-example__output-footer\">\r\n                <a href=\"https://codex.so\" style=\"font-weight: bold;\">Made by CodeX</a>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- Load Tools -->\r\n    <!--\r\n     You can upload Tools to your project's directory and connect them by relative links.\r\n\r\n     Also you can load each Tool from CDN or use NPM/Yarn packages.\r\n\r\n     Read more at Tools Connection doc:\r\n     https://editorjs.io/getting-started#tools-connection\r\n     -->\r\n    <!-- <script src=\"https://cdn.jsdelivr.net/npm/@editorjs/simple-image@latest\"></script><!-- Image -->\r\n    <!--  <script src=\"https://cdn.jsdelivr.net/npm/@editorjs/embed@latest\"></script><!-- Embed -->\r\n    <!--  <script src=\"https://cdn.jsdelivr.net/npm/@editorjs/link@latest\"></script><!-- Link -->\r\n\r\n    <script src=\"https://unpkg.com/markerjs2/markerjs2.js\"></script>\r\n    <script src=\"https://ianb.ca/example/tools/attaches/index.js\"></script><!-- Link -->\r\n    <!-- <script src=\"https://cdn.jsdelivr.net/npm/@editorjs/image@2.3.0\"></script><!-- Link -->\r\n    <!--  <script src=\"https://ianb.ca/example/tools/image/dist/bundle.js\"></script><!-- Link -->\r\n    <script src=\"/2a2c5bd085cf10a177098f3e075f548c.js\"></script>\r\n\r\n    <!-- <script src=\"https://cdn.jsdelivr.net/npm/@editorjs/simple-image@latest\"></script><!-- Link -->\r\n    <!-- Load Editor.js's Core -->\r\n    <script src=\"https://cdn.jsdelivr.net/npm/@editorjs/editorjs@latest\"></script>\r\n\r\n    <script src=\"/d2aa20d6036f255d8d032ac5959d3919.js\"></script>\r\n\r\n    <script src=\"/1b10ec800d38e15f41aa2c88436dd7ef.js\"></script>\r\n   \r\n    <link rel=\"stylesheet\" href=\"/45df00245fc4dfeb190eb9ef5d7d53e7.css\">\r\n    <script src=\"/c9c328910aa2255e981ba4f732adabba.js\"></script>\r\n    <!-- Initialization -->\r\n    <script>var _EditorJS;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\r\n         * To initialize the Editor, create a new instance with configuration object\r\n         * @see docs/installation.md for mode details\r\n         */\nvar editor = new EditorJS((_EditorJS = {\n  readOnly: false,\n  holder: 'editorjs',\n\n  /**\r\n   * Common Inline Toolbar settings\r\n   * - if true (or not specified), the order from 'tool' property will be used\r\n   * - if an array of tool names, this order will be used\r\n   */\n  inlineToolbar: ['link', 'marker', 'bold', 'italic']\n}, _defineProperty(_EditorJS, \"inlineToolbar\", true), _defineProperty(_EditorJS, \"tools\", {\n  /**\r\n   * Each Tool is a Plugin. Pass them via 'class' option with necessary settings {@link docs/tools.md}\r\n    image: {\r\n      class: ImageTool,\r\n      config: {\r\n          endpoints: {\r\n              byFile: 'http://localhost:8008/uploadFile', // Your backend file uploader endpoint\r\n              byUrl: 'http://localhost:8008/fetchUrl', // Your endpoint that provides uploading by Url\r\n          }\r\n      }\r\n  },   */\n  image: SimpleImage,\n  templatedparagraph: {\n    class: TemplatedParagraph,\n    config: {}\n  },\n  attaches: {\n    class: AttachesTool,\n    config: {\n      endpoint: 'http://localhost:8008/uploadFile'\n    }\n  }\n}), _defineProperty(_EditorJS, \"data\", {\n  blocks: [{\n    type: 'paragraph',\n    data: {\n      text: 'Hey. Meet the new Editor. On this page you can see it in action â€” try to edit this text. Source code of the page contains the example of connection and configuration.'\n    }\n  }, {\n    type: 'templatedparagraph',\n    data: {\n      text: 'templatedparagraph'\n    }\n  }, {\n    type: 'templatedparagraph',\n    data: {\n      text: '<MTEXT>sometext</MTEXT>'\n    }\n  }]\n}), _defineProperty(_EditorJS, \"onReady\", function onReady() {\n  saveButton.click();\n}), _defineProperty(_EditorJS, \"onChange\", function onChange(api, block) {\n  console.log('something changed', block);\n}), _EditorJS));\n/**\r\n * Saving button\r\n */\n\nvar saveButton = document.getElementById('saveButton');\nvar blockButton = document.getElementById('blockButton');\nvar imageButton = document.getElementById('imageButton');\nvar paraButton = document.getElementById('paraButton');\n/**\r\n * Toggle read-only button\r\n */\n\nvar toggleReadOnlyButton = document.getElementById('toggleReadOnlyButton');\nvar readOnlyIndicator = document.getElementById('readonly-state');\n/**\r\n * Saving example\r\n */\n\nsaveButton.addEventListener('click', function () {\n  editor.save().then(function (savedData) {\n    //   cPreview.show(savedData, document.getElementById(\"output\"));\n    console.log(savedData); //      Native(\"saveCallback\", savedData);\n  }).catch(function (error) {\n    console.error('Saving error', error);\n  });\n});\nvar templatedata = {\n  \"text\": \" some text\"\n};\ntemplatedata.text = \"\\n                        <div>\\n                            <free-text>this is a large block of editable text. this is a large block of editable text. this is a large block of editable text. this is a large block of editable text. this is a large block of editable text. this is a large block of editable text. this is a large block of editable text. this is a large block of editable text. this is a large block of editable text. t\\nhis is a large block of editable text. this is a large block of editable text. this is a large block of editable text.\\nthis is a large block of editable text. </free-text>\\n                            <free-text>editable text </free-text>\\n                            (fixed text not saved )\\n                            (fixed text not saved )\\n                            <fixed-text>   (fixed text saved )</fixed-text>\\n                            <m-select id=\\\"aaa\\\" choices='aaa|bbb|ccc' multiple >multiple choice field </m-select>\\n                            fixed text\\n                            <m-select id=\\\"bbb\\\" onclick='msel_clicked(this)' choices='aaa|bbb|ccc'>choice field </m-select>\\n                            <m-select id=\\\"ccc\\\" onclick='msel_clicked(this)' choices='aaa|bbb|ccc'>choice field</m-select>\\n                            postfix\\n                            <p><deletable-span id=d1>\\n                                this is a deletable paragraph with some editable text and some fixed text and a deletable word inside the deletable paragraph\\n                                  <free-text  placeholder='type something here placeholder'></free-text>\\n                                more   deleteable fixed text\\n                                    <deletable-span id=d2>A deleteable word</deletable-span>\\n                           some extra words here</deletable-span></p>\\n</br><choose-date> </choose-date/> <choose-person/></choose-person><choose-vehicle></choose-vehicle> <choose-officer></choose-officer/> <choose-location></choose-location/>\\n<p>was clothing removed    <m-select id=\\\"q1\\\" choices='Yes|No'>Yes/No</m-select>\\n<p><show-if  triggervalue='Yes' triggeron='q1'>What items were removed? <free-text style='width:100px'>type here</free-text></show-if></p>\\n<p>Type Yes here to trigger a new field ->   <free-text id='q2'>Test</free-text>\\n<p><show-if  triggervalue='Yes' triggeron='q2'>Type more data here <free-text style='width:100px' placeholder='type something here placeholder'></free-text></show-if></p>\\n                     </div>\\n\";\nblockButton.addEventListener('click', function () {\n  //window.alert( editor.blocks, data);\n  var index = editor.blocks.getBlocksCount();\n  editor.blocks.insert(\"templatedparagraph\", templatedata, null, index, true);\n});\nparaButton.addEventListener('click', function () {\n  //window.alert( editor.blocks, data);\n  var index = editor.blocks.getBlocksCount();\n  var text = {\n    \"text\": \"new para\"\n  };\n  editor.blocks.insert(\"paragraph\", text, null, index, true);\n});\nimageButton.addEventListener('click', function () {\n  //window.alert( editor.blocks, data);\n  // Native(\"addAttachment\");\n  var index = editor.blocks.getBlocksCount();\n  var text = {\n    \"caption\": \"caption\",\n    \"url\": \"http://ianb.ca/Photos/P1000615.JPG\"\n  };\n  editor.blocks.insert(\"image\", text, null, index, true);\n});\n\nfunction addBlock(type, data) {\n  var index = editor.blocks.getBlocksCount();\n  editor.blocks.insert(type, data, null, index, true);\n}\n/**\r\n * Toggle read-only example\r\n */\n\n\ntoggleReadOnlyButton.addEventListener('click', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n  var readOnlyState;\n  return regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return editor.readOnly.toggle();\n\n        case 2:\n          readOnlyState = _context.sent;\n          readOnlyIndicator.textContent = readOnlyState ? 'On' : 'Off';\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n})));</script>\r\n\r\n</body>\r\n</html>\r\n"},"sourceMaps":null,"error":null,"hash":"df4737ed2c242c85e440b6e075da0e35","cacheData":{"env":{}}}